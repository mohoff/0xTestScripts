"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_schemas_1 = require("@0xproject/json-schemas");
var web3_wrapper_1 = require("@0xproject/web3-wrapper");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var assert_1 = require("./assert");
var types_1 = require("./types");
/**
 * Verifies that the elliptic curve signature `signature` was generated
 * by signing `data` with the private key corresponding to the `signerAddress` address.
 * @param   data          The hex encoded data signed by the supplied signature.
 * @param   signature     An object containing the elliptic curve signature parameters.
 * @param   signerAddress The hex encoded address that signed the data, producing the supplied signature.
 * @return  Whether the signature is valid for the supplied signerAddress and data.
 */
function isValidSignature(data, signature, signerAddress) {
    assert_1.assert.isHexString('data', data);
    assert_1.assert.doesConformToSchema('signature', signature, json_schemas_1.schemas.ecSignatureSchema);
    assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
    var normalizedSignerAddress = signerAddress.toLowerCase();
    var dataBuff = ethUtil.toBuffer(data);
    var msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);
    try {
        var pubKey = ethUtil.ecrecover(msgHashBuff, signature.v, ethUtil.toBuffer(signature.r), ethUtil.toBuffer(signature.s));
        var retrievedAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));
        return retrievedAddress === signerAddress;
    }
    catch (err) {
        return false;
    }
}
exports.isValidSignature = isValidSignature;
/**
 * Signs an orderHash and returns it's elliptic curve signature.
 * This method currently supports TestRPC, Geth and Parity above and below V1.6.6
 * @param   orderHash       Hex encoded orderHash to sign.
 * @param   signerAddress   The hex encoded Ethereum address you wish to sign it with. This address
 *          must be available via the Provider supplied to 0x.js.
 * @param   shouldAddPersonalMessagePrefix  Some signers add the personal message prefix `\x19Ethereum Signed Message`
 *          themselves (e.g Parity Signer, Ledger, TestRPC) and others expect it to already be done by the client
 *          (e.g Metamask). Depending on which signer this request is going to, decide on whether to add the prefix
 *          before sending the request.
 * @return  An object containing the Elliptic curve signature parameters generated by signing the orderHash.
 */
function signOrderHashAsync(provider, orderHash, signerAddress, shouldAddPersonalMessagePrefix) {
    return __awaiter(this, void 0, void 0, function () {
        var web3Wrapper, normalizedSignerAddress, msgHashHex, orderHashBuff, msgHashBuff, signature, validVParamValues, ecSignatureVRS, isValidVRSSignature, ecSignatureRSV, isValidRSVSignature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    assert_1.assert.isHexString('orderHash', orderHash);
                    web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
                    return [4 /*yield*/, assert_1.assert.isSenderAddressAsync('signerAddress', signerAddress, web3Wrapper)];
                case 1:
                    _a.sent();
                    normalizedSignerAddress = signerAddress.toLowerCase();
                    msgHashHex = orderHash;
                    if (shouldAddPersonalMessagePrefix) {
                        orderHashBuff = ethUtil.toBuffer(orderHash);
                        msgHashBuff = ethUtil.hashPersonalMessage(orderHashBuff);
                        msgHashHex = ethUtil.bufferToHex(msgHashBuff);
                    }
                    return [4 /*yield*/, web3Wrapper.signMessageAsync(normalizedSignerAddress, msgHashHex)];
                case 2:
                    signature = _a.sent();
                    validVParamValues = [27, 28];
                    ecSignatureVRS = parseSignatureHexAsVRS(signature);
                    if (_.includes(validVParamValues, ecSignatureVRS.v)) {
                        isValidVRSSignature = isValidSignature(orderHash, ecSignatureVRS, normalizedSignerAddress);
                        if (isValidVRSSignature) {
                            return [2 /*return*/, ecSignatureVRS];
                        }
                    }
                    ecSignatureRSV = parseSignatureHexAsRSV(signature);
                    if (_.includes(validVParamValues, ecSignatureRSV.v)) {
                        isValidRSVSignature = isValidSignature(orderHash, ecSignatureRSV, normalizedSignerAddress);
                        if (isValidRSVSignature) {
                            return [2 /*return*/, ecSignatureRSV];
                        }
                    }
                    throw new Error(types_1.OrderError.InvalidSignature);
            }
        });
    });
}
exports.signOrderHashAsync = signOrderHashAsync;
function parseSignatureHexAsVRS(signatureHex) {
    var signatureBuffer = ethUtil.toBuffer(signatureHex);
    var v = signatureBuffer[0];
    // HACK: Sometimes v is returned as [0, 1] and sometimes as [27, 28]
    // If it is returned as [0, 1], add 27 to both so it becomes [27, 28]
    var lowestValidV = 27;
    var isProperlyFormattedV = v >= lowestValidV;
    if (!isProperlyFormattedV) {
        v += lowestValidV;
    }
    // signatureBuffer contains vrs
    var vEndIndex = 1;
    var rsIndex = 33;
    var r = signatureBuffer.slice(vEndIndex, rsIndex);
    var sEndIndex = 65;
    var s = signatureBuffer.slice(rsIndex, sEndIndex);
    var ecSignature = {
        v: v,
        r: ethUtil.bufferToHex(r),
        s: ethUtil.bufferToHex(s),
    };
    return ecSignature;
}
function parseSignatureHexAsRSV(signatureHex) {
    var _a = ethUtil.fromRpcSig(signatureHex), v = _a.v, r = _a.r, s = _a.s;
    var ecSignature = {
        v: v,
        r: ethUtil.bufferToHex(r),
        s: ethUtil.bufferToHex(s),
    };
    return ecSignature;
}
//# sourceMappingURL=signature_utils.js.map