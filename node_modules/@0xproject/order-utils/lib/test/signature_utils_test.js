"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0xproject/utils");
var chai = require("chai");
var _ = require("lodash");
require("mocha");
var src_1 = require("../src");
var chai_setup_1 = require("./utils/chai_setup");
var web3_wrapper_1 = require("./utils/web3_wrapper");
chai_setup_1.chaiSetup.configure();
var expect = chai.expect;
var SHOULD_ADD_PERSONAL_MESSAGE_PREFIX = false;
describe('Signature utils', function () {
    describe('#isValidSignature', function () {
        // The Exchange smart contract `isValidSignature` method only validates orderHashes and assumes
        // the length of the data is exactly 32 bytes. Thus for these tests, we use data of this size.
        var dataHex = '0x6927e990021d23b1eb7b8789f6a6feaf98fe104bb0cf8259421b79f9a34222b0';
        var signature = {
            v: 27,
            r: '0x61a3ed31b43c8780e905a260a35faefcc527be7516aa11c0256729b5b351bc33',
            s: '0x40349190569279751135161d22529dc25add4f6069af05be04cacbda2ace2254',
        };
        var address = '0x5409ed021d9299bf6814279a6a1411a7e866a631';
        it("should return false if the data doesn't pertain to the signature & address", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(src_1.isValidSignature('0x0', signature, address)).to.be.false();
                return [2 /*return*/];
            });
        }); });
        it("should return false if the address doesn't pertain to the signature & data", function () { return __awaiter(_this, void 0, void 0, function () {
            var validUnrelatedAddress;
            return __generator(this, function (_a) {
                validUnrelatedAddress = '0x8b0292b11a196601ed2ce54b665cafeca0347d42';
                expect(src_1.isValidSignature(dataHex, signature, validUnrelatedAddress)).to.be.false();
                return [2 /*return*/];
            });
        }); });
        it("should return false if the signature doesn't pertain to the dataHex & address", function () { return __awaiter(_this, void 0, void 0, function () {
            var wrongSignature;
            return __generator(this, function (_a) {
                wrongSignature = _.assign({}, signature, { v: 28 });
                expect(src_1.isValidSignature(dataHex, wrongSignature, address)).to.be.false();
                return [2 /*return*/];
            });
        }); });
        it('should return true if the signature does pertain to the dataHex & address', function () { return __awaiter(_this, void 0, void 0, function () {
            var isValidSignatureLocal;
            return __generator(this, function (_a) {
                isValidSignatureLocal = src_1.isValidSignature(dataHex, signature, address);
                expect(isValidSignatureLocal).to.be.true();
                return [2 /*return*/];
            });
        }); });
    });
    describe('#generateSalt', function () {
        it('generates different salts', function () {
            var equal = src_1.generatePseudoRandomSalt().eq(src_1.generatePseudoRandomSalt());
            expect(equal).to.be.false();
        });
        it('generates salt in range [0..2^256)', function () {
            var salt = src_1.generatePseudoRandomSalt();
            expect(salt.greaterThanOrEqualTo(0)).to.be.true();
            var twoPow256 = new utils_1.BigNumber(2).pow(256);
            expect(salt.lessThan(twoPow256)).to.be.true();
        });
    });
    describe('#isValidOrderHash', function () {
        it('returns false if the value is not a hex string', function () {
            var isValid = src_1.isValidOrderHash('not a hex');
            expect(isValid).to.be.false();
        });
        it('returns false if the length is wrong', function () {
            var isValid = src_1.isValidOrderHash('0xdeadbeef');
            expect(isValid).to.be.false();
        });
        it('returns true if order hash is correct', function () {
            var isValid = src_1.isValidOrderHash('0x' + Array(65).join('0'));
            expect(isValid).to.be.true();
        });
    });
    describe('#signOrderHashAsync', function () {
        var stubs = [];
        var makerAddress;
        before(function () { return __awaiter(_this, void 0, void 0, function () {
            var availableAddreses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3_wrapper_1.web3Wrapper.getAvailableAddressesAsync()];
                    case 1:
                        availableAddreses = _a.sent();
                        makerAddress = availableAddreses[0];
                        return [2 /*return*/];
                }
            });
        }); });
        afterEach(function () {
            // clean up any stubs after the test has completed
            _.each(stubs, function (s) { return s.restore(); });
            stubs = [];
        });
        it('Should return the correct ECSignature', function () { return __awaiter(_this, void 0, void 0, function () {
            var orderHash, expectedECSignature, ecSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderHash = '0x6927e990021d23b1eb7b8789f6a6feaf98fe104bb0cf8259421b79f9a34222b0';
                        expectedECSignature = {
                            v: 27,
                            r: '0x61a3ed31b43c8780e905a260a35faefcc527be7516aa11c0256729b5b351bc33',
                            s: '0x40349190569279751135161d22529dc25add4f6069af05be04cacbda2ace2254',
                        };
                        return [4 /*yield*/, src_1.signOrderHashAsync(web3_wrapper_1.provider, orderHash, makerAddress, SHOULD_ADD_PERSONAL_MESSAGE_PREFIX)];
                    case 1:
                        ecSignature = _a.sent();
                        expect(ecSignature).to.deep.equal(expectedECSignature);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return the correct ECSignature for signatureHex concatenated as R + S + V', function () { return __awaiter(_this, void 0, void 0, function () {
            var orderHash, expectedECSignature, fakeProvider, ecSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderHash = '0x34decbedc118904df65f379a175bb39ca18209d6ce41d5ed549d54e6e0a95004';
                        expectedECSignature = {
                            v: 27,
                            r: '0x117902c86dfb95fe0d1badd983ee166ad259b27acb220174cbb4460d87287113',
                            s: '0x7feabdfe76e05924b484789f79af4ee7fa29ec006cedce1bbf369320d034e10b',
                        };
                        fakeProvider = {
                            sendAsync: function (payload, callback) {
                                return __awaiter(this, void 0, void 0, function () {
                                    var _a, address, message, signature;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                if (!(payload.method === 'eth_sign')) return [3 /*break*/, 2];
                                                _a = payload.params, address = _a[0], message = _a[1];
                                                return [4 /*yield*/, web3_wrapper_1.web3Wrapper.signMessageAsync(address, message)];
                                            case 1:
                                                signature = _b.sent();
                                                callback(null, {
                                                    id: 42,
                                                    jsonrpc: '2.0',
                                                    result: "0x" + signature.substr(130) + signature.substr(2, 128),
                                                });
                                                return [3 /*break*/, 3];
                                            case 2:
                                                callback(null, { id: 42, jsonrpc: '2.0', result: [makerAddress] });
                                                _b.label = 3;
                                            case 3: return [2 /*return*/];
                                        }
                                    });
                                });
                            },
                        };
                        return [4 /*yield*/, src_1.signOrderHashAsync(fakeProvider, orderHash, makerAddress, SHOULD_ADD_PERSONAL_MESSAGE_PREFIX)];
                    case 1:
                        ecSignature = _a.sent();
                        expect(ecSignature).to.deep.equal(expectedECSignature);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return the correct ECSignature for signatureHex concatenated as V + R + S', function () { return __awaiter(_this, void 0, void 0, function () {
            var orderHash, expectedECSignature, fakeProvider, ecSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderHash = '0x34decbedc118904df65f379a175bb39ca18209d6ce41d5ed549d54e6e0a95004';
                        expectedECSignature = {
                            v: 27,
                            r: '0x117902c86dfb95fe0d1badd983ee166ad259b27acb220174cbb4460d87287113',
                            s: '0x7feabdfe76e05924b484789f79af4ee7fa29ec006cedce1bbf369320d034e10b',
                        };
                        fakeProvider = {
                            sendAsync: function (payload, callback) {
                                return __awaiter(this, void 0, void 0, function () {
                                    var _a, address, message, signature;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                if (!(payload.method === 'eth_sign')) return [3 /*break*/, 2];
                                                _a = payload.params, address = _a[0], message = _a[1];
                                                return [4 /*yield*/, web3_wrapper_1.web3Wrapper.signMessageAsync(address, message)];
                                            case 1:
                                                signature = _b.sent();
                                                callback(null, {
                                                    id: 42,
                                                    jsonrpc: '2.0',
                                                    result: signature,
                                                });
                                                return [3 /*break*/, 3];
                                            case 2:
                                                callback(null, { id: 42, jsonrpc: '2.0', result: [makerAddress] });
                                                _b.label = 3;
                                            case 3: return [2 /*return*/];
                                        }
                                    });
                                });
                            },
                        };
                        return [4 /*yield*/, src_1.signOrderHashAsync(fakeProvider, orderHash, makerAddress, SHOULD_ADD_PERSONAL_MESSAGE_PREFIX)];
                    case 1:
                        ecSignature = _a.sent();
                        expect(ecSignature).to.deep.equal(expectedECSignature);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=signature_utils_test.js.map