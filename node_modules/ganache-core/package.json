{
  "_args": [
    [
      "ganache-core@github:0xproject/ganache-core",
      "/home/mo/dev/brickblock/0x-openrelay-playground/node_modules/@0xproject/subproviders"
    ]
  ],
  "_from": "0xproject/ganache-core",
  "_id": "ganache-core@2.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ganache-core",
  "_phantomChildren": {
    "async": "2.6.1",
    "async-eventemitter": "0.2.4",
    "camelcase": "3.0.0",
    "cliui": "3.2.0",
    "clone": "2.1.1",
    "create-hash": "1.2.0",
    "decamelize": "1.2.0",
    "eth-query": "2.1.2",
    "eth-sig-util": "1.4.2",
    "ethereumjs-account": "2.0.5",
    "ethereumjs-tx": "1.3.4",
    "ethereumjs-util": "5.2.0",
    "ethjs-util": "0.1.4",
    "fake-merkle-patricia-tree": "1.0.1",
    "fetch-ponyfill": "4.1.0",
    "fs-extra": "0.30.0",
    "functional-red-black-tree": "1.0.1",
    "get-caller-file": "1.0.2",
    "json-rpc-engine": "3.7.3",
    "json-rpc-error": "2.0.0",
    "json-stable-stringify": "1.0.1",
    "keccakjs": "0.2.1",
    "lodash.assign": "4.2.0",
    "memorystream": "0.3.1",
    "merkle-patricia-tree": "2.3.1",
    "os-locale": "1.4.0",
    "pbkdf2": "3.0.16",
    "promise-to-callback": "1.0.0",
    "randombytes": "2.0.6",
    "read-pkg-up": "1.0.1",
    "readable-stream": "2.3.6",
    "request": "2.87.0",
    "require-directory": "2.1.1",
    "require-from-string": "1.2.1",
    "require-main-filename": "1.0.1",
    "rlp": "2.0.0",
    "rustbn.js": "0.1.2",
    "safe-buffer": "5.1.2",
    "secp256k1": "3.5.0",
    "semaphore": "1.1.0",
    "semver": "5.5.0",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "tape": "4.9.0",
    "unorm": "1.4.1",
    "which-module": "1.0.0",
    "window-size": "0.2.0",
    "xhr": "2.5.0",
    "xtend": "4.0.1",
    "y18n": "3.2.1",
    "yargs-parser": "2.4.1"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/0xproject/ganache-core/master/package.json",
      "gitUrl": "git://github.com/0xproject/ganache-core.git",
      "httpsUrl": "git+https://github.com/0xproject/ganache-core.git",
      "shortcut": "github:0xproject/ganache-core",
      "ssh": "git@github.com:0xproject/ganache-core.git",
      "sshUrl": "git+ssh://git@github.com/0xproject/ganache-core.git",
      "type": "github"
    },
    "name": "ganache-core",
    "raw": "ganache-core@github:0xproject/ganache-core",
    "rawSpec": "github:0xproject/ganache-core",
    "scope": null,
    "spec": "github:0xproject/ganache-core",
    "type": "hosted"
  },
  "_requiredBy": [
    "/@0xproject/subproviders"
  ],
  "_resolved": "git://github.com/0xproject/ganache-core.git#3e4d25d24fe9ccabede19b22d9ecd6004bdd8f73",
  "_shasum": "94d63d96133fd4b323e3912c43993726168a8504",
  "_shrinkwrap": null,
  "_spec": "ganache-core@github:0xproject/ganache-core",
  "_where": "/home/mo/dev/brickblock/0x-openrelay-playground/node_modules/@0xproject/subproviders",
  "bugs": {
    "url": "https://github.com/trufflesuite/ganache-core/issues"
  },
  "dependencies": {
    "abstract-leveldown": "^3.0.0",
    "async": "^2.5.0",
    "bip39": "~2.4.0",
    "bn.js": "4.11.6",
    "cachedown": "^1.0.0",
    "chai": "^3.5.0",
    "clone": "^2.1.1",
    "ethereumjs-account": "~2.0.4",
    "ethereumjs-block": "~1.2.2",
    "ethereumjs-tx": "^1.3.0",
    "ethereumjs-util": "^5.1.5",
    "ethereumjs-vm": "2.3.3",
    "ethereumjs-wallet": "~0.6.0",
    "fake-merkle-patricia-tree": "~1.0.1",
    "heap": "~0.2.6",
    "js-scrypt": "^0.2.0",
    "level-sublevel": "^6.6.1",
    "levelup": "^1.1.0",
    "localstorage-down": "^0.6.7",
    "lodash": "^4.17.5",
    "merkle-patricia-tree": "^2.2.0",
    "mocha": "~3.3.0",
    "pify": "^3.0.0",
    "prepend-file": "^1.3.1",
    "seedrandom": "~2.4.2",
    "shebang-loader": "0.0.1",
    "solc": "0.4.18",
    "temp": "^0.8.3",
    "tmp": "0.0.31",
    "web3": "^1.0.0-beta.30",
    "web3-provider-engine": "^13.6.5",
    "websocket": "^1.0.24",
    "yargs": "^7.0.2"
  },
  "description": "[![npm](https://img.shields.io/npm/v/ganache-core.svg)]() [![npm](https://img.shields.io/npm/dm/ganache-core.svg)]() [![Build Status](https://travis-ci.org/trufflesuite/ganache-core.svg?branch=master)](https://travis-ci.org/trufflesuite/ganache-core) # Ganache Core",
  "devDependencies": {
    "assert-match": "^1.1.1",
    "memdown": "^1.3.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "gitHead": "3e4d25d24fe9ccabede19b22d9ecd6004bdd8f73",
  "homepage": "https://github.com/trufflesuite/ganache-core#readme",
  "license": "MIT",
  "main": "./index.js",
  "name": "ganache-core",
  "optionalDependencies": {},
  "readme": "[![npm](https://img.shields.io/npm/v/ganache-core.svg)]()\n[![npm](https://img.shields.io/npm/dm/ganache-core.svg)]()\n[![Build Status](https://travis-ci.org/trufflesuite/ganache-core.svg?branch=master)](https://travis-ci.org/trufflesuite/ganache-core)\n# Ganache Core\n\nThis is the core code that powers the Ganache application and the the Ganache command line tool.\n\n# INSTALL\n\n`ganache-core` is written in Javascript and distributed as a Node package via `npm`. Make sure you have Node.js (>= v6.11.5) installed, and your environment is capable of installing and compiling `npm` modules.\n\n**macOS** Make sure you have the XCode Command Line Tools installed. These are needed in general to be able to compile most C based languages on your machine, as well as many npm modules.\n\n**Windows** See our [Windows install instructions](https://github.com/ethereumjs/testrpc/wiki/Installing-TestRPC-on-Windows).\n\n**Ubuntu/Linux** Follow the basic instructions for installing [Node.js](https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions) and make sure that you have `npm` installed, as well as the `build-essential` `apt` package (it supplies `make` which you will need to compile most things). Use the official Node.js packages, *do not use the package supplied by your distribution.*\n\n\n```Bash\nnpm install ganache-core\n```\n\n# USAGE\n\nAs a Web3 provider:\n\n```javascript\nvar Ganache = require(\"ganache-core\");\nweb3.setProvider(Ganache.provider());\n```\n\nAs a general http server:\n\n```javascript\nvar Ganache = require(\"ganache-core\");\nvar server = Ganache.server();\nserver.listen(port, function(err, blockchain) {...});\n```\n\nBoth `.provider()` and `.server()` take a single object which allows you to specify behavior of the Ganache instance. This parameter is optional. Available options are:\n\n* `\"accounts\"`: `Array` of `Object`'s. Each object should have a balance key with a hexadecimal value. The key `secretKey` can also be specified, which represents the account's private key. If no `secretKey`, the address is auto-generated with the given balance. If specified, the key is used to determine the account's address.\n* `\"debug\"`: `boolean` - Output VM opcodes for debugging\n* `\"logger\"`: `Object` - Object, like `console`, that implements a `log()` function.\n* `\"mnemonic\"`: Use a specific HD wallet mnemonic to generate initial addresses.\n* `\"port\"`: Port number to listen on when running as a server.\n* `\"seed\"`: Use arbitrary data to generate the HD wallet mnemonic to be used.\n* `\"default_balance_ether\"`: `number` - The default account balance, specified in ether.\n* `\"total_accounts\"`: `number` - Number of accounts to generate at startup.\n* `\"fork\"`: `string` or `object` - When a `string`, same as `--fork` option above. Can also be a Web3 Provider object, optionally used in conjunction with the `fork_block_number` option below.\n* `\"fork_block_number\"`: `string` or `number` - Block number the provider should fork from, when the `fork` option is specified. If the `fork` option is specified as a string including the `@` sign and a block number, the block number in the `fork` parameter takes precedence.\n* `\"network_id\"`: `integer` - Same as `--networkId` option above.\n* `\"time\"`: `Date` - Date that the first block should start. Use this feature, along with the `evm_increaseTime` method to test time-dependent code.\n* `\"locked\"`: `boolean` - whether or not accounts are locked by default.\n* `\"unlocked_accounts\"`: `Array` - array of addresses or address indexes specifying which accounts should be unlocked.\n* `\"db_path\"`: `String` - Specify a path to a directory to save the chain database. If a database already exists, that chain will be initialized instead of creating a new one.\n* `\"db\"`: `Object` - Specify an alternative database instance, for instance [MemDOWN](https://github.com/level/memdown).\n* `\"ws\"`: Enable a websocket server. This is `true` by default.\n* `\"vmErrorsOnRPCResponse\"`: Whether to report runtime errors from EVM code as RPC errors. This is `true` by default to replicate the error reporting behavior of previous versions of ganache.\n* `\"hdPath\"`: The hierarchical deterministic path to use when generating accounts. Default: \"m/44'/60'/0'/0/\"\n\n# IMPLEMENTED METHODS\n\nThe RPC methods currently implemented are:\n\n* `bzz_hive` (stub)\n* `bzz_info` (stub)\n* `debug_traceTransaction`\n* `eth_accounts`\n* `eth_blockNumber`\n* `eth_call`\n* `eth_coinbase`\n* `eth_estimateGas`\n* `eth_gasPrice`\n* `eth_getBalance`\n* `eth_getBlockByNumber`\n* `eth_getBlockByHash`\n* `eth_getBlockTransactionCountByHash`\n* `eth_getBlockTransactionCountByNumber`\n* `eth_getCode` (only supports block number “latest”)\n* `eth_getCompilers`\n* `eth_getFilterChanges`\n* `eth_getFilterLogs`\n* `eth_getLogs`\n* `eth_getStorageAt`\n* `eth_getTransactionByHash`\n* `eth_getTransactionByBlockHashAndIndex`\n* `eth_getTransactionByBlockNumberAndIndex`\n* `eth_getTransactionCount`\n* `eth_getTransactionReceipt`\n* `eth_hashrate`\n* `eth_mining`\n* `eth_newBlockFilter`\n* `eth_newFilter` (includes log/event filters)\n* `eth_protocolVersion`\n* `eth_sendTransaction`\n* `eth_sendRawTransaction`\n* `eth_sign`\n* `eth_subscribe` (only for websocket connections. \"syncing\" subscriptions are not yet supported)\n* `eth_unsubscribe` (only for websocket connections. \"syncing\" subscriptions are not yet supported)\n* `eth_syncing`\n* `eth_uninstallFilter`\n* `net_listening`\n* `net_peerCount`\n* `net_version`\n* `miner_start`\n* `miner_stop`\n* `personal_listAccounts`\n* `personal_lockAccount`\n* `personal_newAccount`\n* `personal_importRawKey`\n* `personal_unlockAccount`\n* `personal_sendTransaction`\n* `shh_version`\n* `rpc_modules`\n* `web3_clientVersion`\n* `web3_sha3`\n\nThere’s also special non-standard methods that aren’t included within the original RPC specification:\n\n* `evm_snapshot` : Snapshot the state of the blockchain at the current block. Takes no parameters. Returns the integer id of the snapshot created.\n* `evm_revert` : Revert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to. If no snapshot id is passed it will revert to the latest snapshot. Returns `true`.\n* `evm_increaseTime` : Jump forward in time. Takes one parameter, which is the amount of time to increase in seconds. Returns the total time adjustment, in seconds.\n* `evm_mine` : Force a block to be mined. Takes no parameters. Mines a block independent of whether or not mining is started or stopped.\n\n# Unsupported Methods\n\n* `eth_compileSolidity`: If you'd like Solidity compilation in Javascript, please see the [solc-js project](https://github.com/ethereum/solc-js).\n\n\n# TESTING\n\nRun tests via:\n\n```\n$ npm test\n```\n\n# LICENSE\n[MIT](https://tldrlegal.com/license/mit-license)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/trufflesuite/ganache-core.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "2.1.0"
}
